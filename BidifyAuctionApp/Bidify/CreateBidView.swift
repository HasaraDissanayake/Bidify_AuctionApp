////  CreateBidView.swift//  Bidify_AuctionApp////  Created by Hasara Dissanayake on 5/5/25.//import SwiftUIimport PhotosUIstruct CreateBidView: View {    @EnvironmentObject var bidManager: BidManager    @Environment(\.dismiss) var dismiss // Allows you to dismiss the view after creating a bid    @State private var itemID = UUID()    @State private var itemName = ""    @State private var description = ""    @State private var category = "Electronics"    @State private var condition = "Brand New"    @State private var imageSelection: PhotosPickerItem?    @State private var selectedImage: UIImage?    @State private var sellerName = ""    @State private var email = ""    @State private var contact = ""    @State private var location = ""    let categories = ["Electronics", "Fashion", "Art", "Collectables", "Antiques", "Jewelry", "Sports Memo", "Furniture", "Others"]    let conditions = ["Brand New", "Refurbished", "Used"]    var body: some View {        NavigationView {            VStack(spacing: 0) {                ScrollViewReader { proxy in                    ScrollView(.vertical, showsIndicators: true) {                        VStack(alignment: .leading, spacing: 10) {                            Color.clear.frame(height: 0).id("top") // Top anchor                            Text("Item ID: \(itemID.uuidString)")                                .font(.caption)                                .foregroundColor(.gray)                            itemNameField                            descriptionField                            categoryPicker                            conditionPicker                            imagePicker                            imagePreview                            sellerDetails                            actionButtons                            Color.clear.frame(height: 0).id("bottom")                        }                        .padding()                    }                }            }            .navigationBarTitleDisplayMode(.inline)            .toolbar {                ToolbarItem(placement: .principal) {                    Text("Create Bid")                        .font(.title3)                        .fontWeight(.bold)                        .foregroundColor(.primary)                }            }        }        .onChange(of: imageSelection) { newItem in            Task {                if let data = try? await newItem?.loadTransferable(type: Data.self), let uiImage = UIImage(data: data) {                    selectedImage = uiImage                }            }        }    }    private var itemNameField: some View {        LabeledTextField(label: "Item Name", text: $itemName)    }    private var descriptionField: some View {        LabeledTextField(label: "Description", text: $description)    }    private var categoryPicker: some View {        PickerWithLabel(title: "Category", selection: $category, items: categories)    }    private var conditionPicker: some View {        PickerWithLabel(title: "Condition", selection: $condition, items: conditions)    }    private var imagePicker: some View {        HStack {            Text("Image:")                .frame(width: 110, alignment: .leading)                .foregroundColor(.gray)            PhotosPicker(selection: $imageSelection, matching: .images) {                HStack {                    Image(systemName: "photo")                        .colorMultiply(.black)                    Text("Select Item Image")                        .foregroundColor(.primary)                }                .padding()                .frame(maxWidth: .infinity)                .background(Color.gray.opacity(0.2))                .cornerRadius(10)            }        }    }    private var imagePreview: some View {        Group {            if let image = selectedImage {                VStack(alignment: .leading, spacing: 8) {                    Image(uiImage: image)                        .resizable()                        .scaledToFit()                        .frame(height: 150)                        .cornerRadius(10)                    Button(action: {                        selectedImage = nil                        imageSelection = nil                    }) {                        HStack {                            Image(systemName: "trash")                            Text("Remove Image")                        }                        .foregroundColor(.red)                    }                }            }        }    }    private var sellerDetails: some View {        VStack(alignment: .leading, spacing: 10) {            Text("Seller Details")                .font(.headline)                .foregroundColor(.primary)                .padding(.bottom, 4)            LabeledTextField(label: "Seller Name", text: $sellerName)            LabeledTextField(label: "Email", text: $email)            LabeledTextField(label: "Contact", text: $contact)            LabeledTextField(label: "Location", text: $location)        }    }    private var actionButtons: some View {        HStack(spacing: 16) {            Button(action: createBid) {                Text("Create Bid")                    .fontWeight(.semibold)                    .frame(maxWidth: .infinity)                    .padding()                    .background(Color.teal)                    .foregroundColor(.white)                    .cornerRadius(10)            }            Button(action: resetForm) {                Text("Reset Form")                    .fontWeight(.semibold)                    .frame(maxWidth: .infinity)                    .padding()                    .background(Color.red.opacity(0.8))                    .foregroundColor(.white)                    .cornerRadius(10)            }        }    }    func createBid() {        let newItem = Bid_Item(            id: itemID,            itemName: itemName,            description: description,            category: category,            condition: condition,            image: selectedImage,            sellerName: sellerName,            email: email,            contact: contact,            location: location,            createdDate: Date()        )        bidManager.addItem(newItem)        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {            bidManager.saveItemsToUserDefaults()            resetForm()            dismiss()        }    }    func resetForm() {        itemID = UUID()        itemName = ""        description = ""        category = "Electronics"        condition = "Brand New"        selectedImage = nil        imageSelection = nil        sellerName = ""        email = ""        contact = ""        location = ""    }}struct PickerWithLabel: View {    var title: String    @Binding var selection: String    var items: [String]    var body: some View {        HStack {            Text("\(title):")                .frame(width: 110, alignment: .leading)                .foregroundColor(.gray)            Picker(title, selection: $selection) {                ForEach(items, id: \.self) { Text($0) }            }            .pickerStyle(MenuPickerStyle())            .frame(maxWidth: .infinity, alignment: .leading)            .padding(10)            .background(Color.gray.opacity(0.1))            .cornerRadius(8)        }    }}struct LabeledTextField: View {    let label: String    @Binding var text: String    var body: some View {        HStack {            Text("\(label):")                .frame(width: 110, alignment: .leading)                .foregroundColor(.gray)            TextField(label, text: $text)                .padding(10)                .background(Color.black.opacity(0.1))                .cornerRadius(8)        }    }}struct CreateBidView_Previews: PreviewProvider {    static var previews: some View {        CreateBidView()            .environmentObject(BidManager())    }}