import SwiftUIimport PhotosUI// MARK: - Create Bid Viewstruct CreateBidView: View {    @EnvironmentObject var bidManager: BidManager    @State private var itemName = ""    @State private var description = ""    @State private var category = "Electronics"    @State private var condition = "Brand New"    @State private var imageSelection: PhotosPickerItem?    @State private var selectedImage: UIImage?    @State private var sellerName = ""    @State private var email = ""    @State private var contact = ""    @State private var location = ""        let categories = ["Electronics", "Fashion", "Art", "Collectables", "Antiques", "Jewelry", "Sports", "Furniture", "Others"]    let conditions = ["Brand New", "Refurbished", "Used"]    var body: some View {        NavigationView {            ScrollView {                VStack(alignment: .leading, spacing: 16) {                    Group {                        TextField("Item Name", text: $itemName)                        TextField("Description", text: $description)                        Picker("Category", selection: $category) {                            ForEach(categories, id: \.self) {                                Text($0)                            }                        }.pickerStyle(MenuPickerStyle())                        Picker("Condition", selection: $condition) {                            ForEach(conditions, id: \.self) {                                Text($0)                            }                        }.pickerStyle(MenuPickerStyle())                    }                    // Image Picker                    PhotosPicker(selection: $imageSelection, matching: .images) {                        HStack {                            Image(systemName: "photo")                            Text("Select Item Image")                        }                        .frame(maxWidth: .infinity)                        .padding()                        .background(Color.primaryColor.opacity(0.2))                        .cornerRadius(10)                    }                    .onChange(of: imageSelection) { newItem in                        Task {                            if let data = try? await newItem?.loadTransferable(type: Data.self),                               let uiImage = UIImage(data: data) {                                selectedImage = uiImage                            }                        }                    }                    if let image = selectedImage {                        Image(uiImage: image)                            .resizable()                            .scaledToFit()                            .frame(height: 150)                            .cornerRadius(10)                    }                    Group {                        TextField("Seller Name", text: $sellerName)                        TextField("Email Address", text: $email)                        TextField("Contact Number", text: $contact)                            .keyboardType(.phonePad)                        TextField("Location", text: $location)                    }                    Button(action: createBid) {                        Text("Create Bid")                            .fontWeight(.semibold)                            .frame(maxWidth: .infinity)                            .padding()                            .background(Color.primaryColor)                            .foregroundColor(.white)                            .cornerRadius(12)                    }                }                .padding()            }            .navigationTitle("Create Bid")        }    }    func createBid() {        let newItem = BidItem(            itemName: itemName,            description: description,            category: category,            condition: condition,            image: selectedImage,            sellerName: sellerName,            email: email,            contact: contact,            location: location,            createdDate: Date()        )        bidManager.addItem(newItem)        // Clear inputs after creation        itemName = ""        description = ""        selectedImage = nil        sellerName = ""        email = ""        contact = ""        location = ""    }}// MARK: - Bid Managerclass BidManager: ObservableObject {    @Published var bidItems: [BidItem] = []        func addItem(_ item: BidItem) {        bidItems.append(item)    }}// MARK: - Bid Item Modelstruct BidItem: Identifiable {    let id: UUID = UUID()    let itemName: String    let description: String    let category: String    let condition: String    let image: UIImage?    let sellerName: String    let email: String    let contact: String    let location: String    let createdDate: Date}// MARK: - Color Extensionextension Color {    static let primaryColor = Color(hex: "#5F99AE")}// MARK: - Hex Color Supportextension Color {    init(hex: String) {        let scanner = Scanner(string: hex)        _ = scanner.scanString("#")        var rgb: UInt64 = 0        scanner.scanHexInt64(&rgb)        let r = Double((rgb >> 16) & 0xFF) / 255        let g = Double((rgb >> 8) & 0xFF) / 255        let b = Double(rgb & 0xFF) / 255        self.init(red: r, green: g, blue: b)    }}// MARK: - Previewstruct CreateBidView_Previews: PreviewProvider {    static var previews: some View {        CreateBidView()            .environmentObject(BidManager())    }}