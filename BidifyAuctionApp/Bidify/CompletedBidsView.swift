//  CompletedBidsView.swift//  Bidify_AuctionApp////  Created by Hasara Dissanayake on 5/4/25.//import SwiftUI//Completed Bids Viewstruct CompletedBidsView: View {    let completedBids: [CompletedBidItem] = [        CompletedBidItem(id: 1, name: "Apple Watch Series 8", imageName: "applewatch", category: "Electronics", addedDate: Date().addingTimeInterval(-3600), status: .won),        CompletedBidItem(id: 2, name: "Gaming Laptop", imageName: "laptopcomputer", category: "Electronics", addedDate: Date().addingTimeInterval(-86400), status: .lost),        CompletedBidItem(id: 3, name: "Canon DSLR Camera", imageName: "camera", category: "Electronics", addedDate: Date().addingTimeInterval(-7200), status: .cancelled)    ]    var body: some View {        NavigationView {            VStack(spacing: 0) {                if completedBids.isEmpty {                    VStack {                        Image(systemName: "clock.arrow.circlepath")                            .resizable()                            .scaledToFit()                            .frame(width: 80, height: 80)                            .foregroundColor(.gray)                        Text("No Completed Bids Yet")                            .font(.title2)                            .foregroundColor(.gray)                            .padding(.top, 10)                    }                    .frame(maxHeight: .infinity)                } else {                    ScrollView {                        VStack(spacing: 15) {                            ForEach(completedBids) { item in                                CompletedBidRow(item: item)                            }                        }                        .padding()                    }                }                Divider()                // Footer                FooterView()            }            .navigationBarTitleDisplayMode(.inline)            .toolbar {                ToolbarItem(placement: .principal) {                    Text("Completed Bids")                        .font(.title3)                        .fontWeight(.bold)                        .foregroundColor(.primaryColor)                }            }            .background(Color(.systemGray6).ignoresSafeArea())        }    }}// Completed Bid Modelstruct CompletedBidItem: Identifiable {    let id: Int    let name: String    let imageName: String    let category: String    let addedDate: Date    let status: BidStatus}// Bid Status Enumenum BidStatus: String {    case won = "Win the Bid"    case lost = "Loss the Bid"    case cancelled = "Cancelled"    var color: Color {        switch self {        case .won: return .green        case .lost: return .red        case .cancelled: return .gray        }    }}//Completed Bid Row Viewstruct CompletedBidRow: View {    let item: CompletedBidItem    var body: some View {        HStack(spacing: 12) {            Image(systemName: item.imageName)                .resizable()                .scaledToFit()                .frame(width: 70, height: 70)                .background(Color.white)                .cornerRadius(10)                .shadow(radius: 1)            VStack(alignment: .leading, spacing: 5) {                Text(item.name)                    .font(.headline)                    .foregroundColor(.black)                Text("Category: \(item.category)")                    .font(.subheadline)                    .foregroundColor(.gray)                Text("Added: \(formattedDate(item.addedDate))")                    .font(.caption)                    .foregroundColor(.secondary)                Text(item.status.rawValue)                    .font(.caption)                    .fontWeight(.semibold)                    .foregroundColor(item.status.color)                    .padding(6)                    .background(item.status.color.opacity(0.1))                    .cornerRadius(6)            }            Spacer()        }        .padding()        .background(Color.white)        .cornerRadius(12)        .shadow(radius: 2)    }    private func formattedDate(_ date: Date) -> String {        let formatter = DateFormatter()        formatter.dateStyle = .medium        formatter.timeStyle = .short        return formatter.string(from: date)    }}//Footer Viewstruct FooterView: View {    var body: some View {        HStack {            Button(action: {}) {                VStack {                    Image(systemName: "house.fill")                    Text("Home").font(.footnote)                }            }            Spacer()            Button(action: {}) {                VStack {                    Image(systemName: "chart.bar.fill")                    Text("Dashboard").font(.footnote)                }            }            Spacer()            Button(action: {}) {                VStack {                    Image(systemName: "heart.fill")                    Text("Wishlist").font(.footnote)                }            }            Spacer()            Button(action: {}) {                VStack {                    Image(systemName: "checkmark.circle.fill")                    Text("Completed").font(.footnote)                }            }            Spacer()            Button(action: {}) {                VStack {                    Image(systemName: "gearshape.fill")                    Text("Settings").font(.footnote)                }            }        }        .padding()        .foregroundColor(.primaryColor)    }}//Previewstruct CompletedBidsView_Previews: PreviewProvider {    static var previews: some View {        CompletedBidsView()    }}